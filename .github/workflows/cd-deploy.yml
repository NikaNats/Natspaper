name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - master

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # Validate Environment Variables
      - name: Validate Environment Variables
        env:
          ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Validating required environment variables..."

          # Check secrets are properly configured
          if [ -z "$ORG_ID" ]; then
            echo "❌ VERCEL_ORG_ID secret is not configured"
            exit 1
          fi

          if [ -z "$PROJECT_ID" ]; then
            echo "❌ VERCEL_PROJECT_ID secret is not configured"
            exit 1
          fi

          if [ -z "$TOKEN" ]; then
            echo "❌ VERCEL_TOKEN secret is not configured"
            exit 1
          fi

          echo "✅ All required environment variables are configured"

      - run: pnpm install --frozen-lockfile

      # Pre-deployment code quality checks
      - name: Run Linter
        run: pnpm run lint
        continue-on-error: false

      - name: Check Code Formatting
        run: pnpm run format:check
        continue-on-error: false

      - name: Check Astro Type Safety
        run: pnpm astro check
        continue-on-error: false

      - name: Run Unit Tests
        run: pnpm run test:run
        continue-on-error: false

      - name: Validate Environment Configuration
        run: |
          echo "Vercel will use the following environment variables from project settings:"
          echo "✓ SITE_WEBSITE: https://natspaper.vercel.app"
          echo "✓ PUBLIC_SENTRY_ENVIRONMENT: production"
          echo "✓ PUBLIC_SENTRY_TRACES_SAMPLE_RATE: 0.1"
          echo ""
          echo "Ensure these are set in Vercel Project Settings > Environment Variables"
        continue-on-error: false

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium
        continue-on-error: false

      - name: Run E2E Tests
        run: pnpm exec playwright test --project chromium
        continue-on-error: false
        env:
          SITE_WEBSITE: https://natspaper.vercel.app/

  Deploy-Production:
    needs: pre-deployment-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        # Note: Environment variables are pulled from Vercel project settings via "vercel pull"
        # This ensures production config (.env.production) is used through Vercel's env vars
        # Required Vercel Environment Variables:
        #   - SITE_WEBSITE=https://natspaper.vercel.app
        #   - PUBLIC_SENTRY_ENVIRONMENT=production
        #   - PUBLIC_SENTRY_TRACES_SAMPLE_RATE=0.1

      # Analyze Production Build Size
      - name: Analyze Production Build Size
        run: |
          echo "=== Production Build Size Analysis ===" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get total build size
          BUILD_SIZE=$(du -sh .vercel/output | cut -f1)
          echo "**Total Build Size:** $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY

          # Check asset sizes
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Directory Sizes:**" >> $GITHUB_STEP_SUMMARY

          if [ -d ".vercel/output/static" ]; then
            STATIC_SIZE=$(du -sh .vercel/output/static | cut -f1)
            echo "- Static Assets: $STATIC_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d ".vercel/output/functions" ]; then
            FUNCTIONS_SIZE=$(du -sh .vercel/output/functions | cut -f1)
            echo "- Functions: $FUNCTIONS_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          # Warn if build is significantly large
          BUILD_SIZE_KB=$(du -sk .vercel/output | cut -f1)
          THRESHOLD_KB=5120  # 5MB threshold for production

          if [ $BUILD_SIZE_KB -gt $THRESHOLD_KB ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Build Size Alert:** Build size ($BUILD_SIZE) exceeds recommended threshold ($(( THRESHOLD_KB / 1024 ))MB)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "✅ Production deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: master" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY

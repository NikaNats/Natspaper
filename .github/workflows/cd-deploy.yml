name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.1'

on:
  push:
    branches:
      - master
  workflow_dispatch:

# Prevent concurrent deployments to production
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Fast-fail validation job
  validate-secrets:
    name: Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      deployment-url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Validate Required Secrets
        env:
          ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          missing_secrets=()
          [ -z "$ORG_ID" ] && missing_secrets+=("VERCEL_ORG_ID")
          [ -z "$PROJECT_ID" ] && missing_secrets+=("VERCEL_PROJECT_ID")
          [ -z "$TOKEN" ] && missing_secrets+=("VERCEL_TOKEN")
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
          echo "‚úÖ All required secrets configured"
      
      - name: Set Deployment URL
        id: set-url
        run: echo "url=https://natspaper.vercel.app" >> $GITHUB_OUTPUT

  # Code quality checks - runs sequentially but fast
  code-quality:
    name: Code Quality & Type Safety
    needs: validate-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run Linter
        run: pnpm run lint

      - name: Check Code Formatting
        run: pnpm run format:check

      - name: Check Astro Type Safety
        run: pnpm astro check

  # Unit tests run in parallel with code quality
  unit-tests:
    name: Unit Tests
    needs: validate-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run Unit Tests
        run: pnpm run test:run

  # E2E tests with optimized Playwright caching
  e2e-tests:
    name: E2E Tests (Chromium)
    needs: validate-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      # Get exact Playwright version for cache key
      - name: Get Playwright Version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm list @playwright/test --depth=0 --json | jq -r '.[0].devDependencies["@playwright/test"].version // empty')
          if [ -z "$PLAYWRIGHT_VERSION" ]; then
            echo "::error::Failed to detect Playwright version"
            exit 1
          fi
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
          echo "Playwright version: $PLAYWRIGHT_VERSION"

      # Cache Playwright browsers - saves ~115 seconds per run
      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      # Install browsers and system dependencies
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      # When cache hits, still need system dependencies but browsers are cached
      - name: Install System Dependencies (Cache Hit)
        run: pnpm exec playwright install-deps chromium
        if: steps.playwright-cache.outputs.cache-hit == 'true'

      - name: Run E2E Tests
        run: pnpm exec playwright test --project chromium
        env:
          SITE_WEBSITE: ${{ needs.validate-secrets.outputs.deployment-url }}

      - name: Upload Test Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 7
          if-no-files-found: ignore

  # Build and deploy job
  build-and-deploy:
    name: Build & Deploy to Production
    needs: [code-quality, unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production
      url: https://natspaper.vercel.app
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Analyze Build Size
        id: build-analysis
        run: |
          if [ ! -d ".vercel/output" ]; then
            echo "::error::Build output directory not found"
            exit 1
          fi
          
          BUILD_SIZE_KB=$(du -sk .vercel/output | cut -f1)
          BUILD_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $BUILD_SIZE_KB / 1024}")
          
          echo "size_mb=$BUILD_SIZE_MB" >> $GITHUB_OUTPUT
          echo "size_kb=$BUILD_SIZE_KB" >> $GITHUB_OUTPUT
          
          {
            echo "### üì¶ Production Build Analysis"
            echo ""
            echo "**Total Build Size:** ${BUILD_SIZE_MB}MB"
            echo ""
            
            if [ -d ".vercel/output/static" ]; then
              STATIC_SIZE=$(du -sh .vercel/output/static | cut -f1)
              echo "- Static Assets: $STATIC_SIZE"
            fi
            
            if [ -d ".vercel/output/functions" ]; then
              FUNCTIONS_SIZE=$(du -sh .vercel/output/functions | cut -f1)
              echo "- Functions: $FUNCTIONS_SIZE"
            fi
            
            echo ""
            
            # Check build size threshold (5MB = 5120 KB)
            if [ "$BUILD_SIZE_KB" -gt 5120 ]; then
              echo "‚ö†Ô∏è **Warning:** Build size exceeds 5MB threshold"
              echo "::warning::Build size ($BUILD_SIZE_MB MB) exceeds recommended 5MB threshold"
            else
              echo "‚úÖ Build size within acceptable limits"
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "Deploying to Vercel production..."
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} 2>&1 | tee /dev/stderr | grep -oP 'https://[^\s]+' | tail -1)
          
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "::error::Failed to extract deployment URL"
            exit 1
          fi
          
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $DEPLOYMENT_URL"

      - name: Deployment Summary
        if: success()
        run: |
          {
            echo "### ‚úÖ Production Deployment Complete"
            echo ""
            echo "**Deployment Details:**"
            echo "- üåê URL: [${{ steps.deploy.outputs.url }}](${{ steps.deploy.outputs.url }})"
            echo "- üåø Branch: \`${{ github.ref_name }}\`"
            echo "- üìù Commit: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
            echo "- üë§ Author: @${{ github.actor }}"
            echo "- ‚è±Ô∏è  Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo "- üì¶ Build Size: ${{ steps.build-analysis.outputs.size_mb }}MB"
            echo ""
            echo "**Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          } >> $GITHUB_STEP_SUMMARY

  # Post-deployment smoke tests
  smoke-tests:
    name: Post-Deployment Verification
    needs: build-and-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: success()
    steps:
      - name: Verify Deployment Health
        run: |
          URL="https://natspaper.vercel.app"
          MAX_RETRIES=3
          RETRY_DELAY=5
          
          echo "Verifying deployment at $URL..."
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES..."
            
            STATUS=$(curl -sSL -o /dev/null -w '%{http_code}' --max-time 10 "$URL" || echo "000")
            
            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ Deployment verified successfully (HTTP $STATUS)"
              
              {
                echo "### üîç Post-Deployment Verification"
                echo ""
                echo "‚úÖ Production site is live and healthy"
                echo "- HTTP Status: $STATUS"
                echo "- Verified: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
              } >> $GITHUB_STEP_SUMMARY
              
              exit 0
            fi
            
            echo "‚ö†Ô∏è  Received HTTP $STATUS, retrying in ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
          done
          
          echo "::error::Deployment verification failed after $MAX_RETRIES attempts (HTTP $STATUS)"
          exit 1

      - name: Check Critical Pages
        run: |
          URL="https://natspaper.vercel.app"
          
          # Add any critical pages that must be accessible
          PAGES=("/" "/about" "/contact")
          
          echo "Checking critical pages..."
          FAILED_PAGES=()
          
          for PAGE in "${PAGES[@]}"; do
            FULL_URL="${URL}${PAGE}"
            STATUS=$(curl -sSL -o /dev/null -w '%{http_code}' --max-time 10 "$FULL_URL" || echo "000")
            
            if [ "$STATUS" -eq 200 ]; then
              echo "‚úÖ $FULL_URL - OK"
            else
              echo "::warning::$FULL_URL returned HTTP $STATUS"
              FAILED_PAGES+=("$PAGE (HTTP $STATUS)")
            fi
          done
          
          if [ ${#FAILED_PAGES[@]} -gt 0 ]; then
            echo "::warning::Some pages failed verification: ${FAILED_PAGES[*]}"
            # Don't fail the job, just warn
          fi
